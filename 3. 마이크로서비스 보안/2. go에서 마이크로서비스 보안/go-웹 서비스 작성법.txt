GO는 HTTP서버에서 HTTPS서버로 부드럽게 이전할 수 있는 강력한 표준 라이브러리를 제공함.

1. 인증서 얻기
조직, 스타드업이나 웹 사이트를 위해 디지털 인증서를 얻는 기본적인 방법은 인증기관에서 신원을 검증하고 인증서를 발급하는 서비스를 구매하는 것(위키피디아에서 리스트를 찾을 수 있다.) -> 물론 무료로 제공하는 인증기관들도 있다.
하지만 2장에서 구축한 이벤트 마이크로 서비스와 같이 어떤 로컬 웹 애플리케이션만의 테스트를 원한다면 어떻게 될까??
-> 테스트 용도에 맞는 인증서 생성을 위해 간단한 방식이 필요함, 이후에 배포할 때 신뢰받는 인증기관을 이용

HTTPS 세션을 초기화하려면 다음과 같은 것들이 필요
1. 다음을 포함하는 디지털 인증서
--다른 대상자들과 공유될 수 있는 공개키
--인증서를 소유하는 서버의 이름이나 도메인 이름
--인증서 발행자, 자가 서명 인증서의 경우에 이 발행자는 자신이 되고 신뢰받는 인증기관에 의해 발행된 인증서의 경우 발행자는 CA가 된다.
2. 비밀로 간직하고 어느 누구와도 공유하지 않아야 하는 개인키

OpenSSL -> TLS 디지털 인증서를 생성할 수 있는 아주 인기 있는 특화된 도구 중 하나
이 조직 자체로는 도구에 대한 미리만들어진 바이너리를 제공하지 않음 -> 제3의 장소들을 나열하는 위키 페이지 (https://wiki.openssl.org/index.php/Binaries)

도구 다운로드했다면 디지털 인증서와 개인키 생성을 위해 활용하는 방법의 예
openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365

req : 요청을 나타냄, 인증서를 요청한다는 것
-x509 : 자가 서명 인증서 출력을 원한다는 것을 알려줌. -> 암호화 방식의 세계에서 X.509 개념으로 포맷
-newkey : 새로운 인증서와 한 쌍을 이루는 개인키를 원하는다는 것
rsa:2048 : -newkey 옵션에 대한 인수. 해당 키를 생성하는데 사용하고자하는 암호화 알고리즘 타입을 알려줌
-keyout : 새롭게 생성된 개인키에 쓰일 파일 이름을 제공
key.pem : -keyout 옵션에 대한 인수. key.pem이라는 파일에 개인키를 저장하고자 하는 것을 알려줌 -> 공개되어선 안됨
-out : 새롭게 생성된 자가 서명 인증서에 쓰일 파일 이름을 제공
cert.pem : -out 옵션에 대한 인수. cert.pem이라는 파일에 인증서를 저장하고자 하는 것을 알려줌 -> HTTPS 호출을 위해 웹 서버와 웹 클라이언트 공유
-days : 이 인증서가 유효성을 가지는 일수.
365 : -days옵션에 대한 인수. -> 단순히 365일이나 1년 동안 유효한 인증서 원하는다는 것


generate_cert.go -> 테스트에서 활요할 자가 서명 인증서를 생성하는 openssl 외에 또다른 접근 방법
