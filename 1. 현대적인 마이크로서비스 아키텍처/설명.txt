기본 설계 목표

1. 확장성 - 클라우드 애플리케이션의 핵심 설계 목표 중 하나, 
확장성은 사용자들에게 효율적으로 서비스하고자 필요시 애플리케이션의 자원을 늘려 나가야하는 것을 의미
즉, 사용자가 없을 땐 적절한 수준으로 자원을 다시 줄일 수 있어야함.
애플리케이션을 관리하는 작은 가상머신 인스턴스들을 사용하고 추가해 규모를 조정

수평적 확장, 스케일아웃
- 규모 조정

수직적 확장, 스케일업
-인스턴스들의 수를 증가하지 않고 자원을 더 할당하는 방식

2. 스케일아웃 할 때 고려할 목표.
2.1. 비상태 기반 -> 클라우드 애플리케이션의 각 인스턴스는 어떤 종류의 내부적인 상태 값도 가져서는 안된다.
2.2. 쉬운 배포 -> 새로운 인스턴스를 만드는 작업은 어떤 종류의 수작업도 요구돼서는 안됨
2.3. 회복성 -> 의도적, 의도치 않은 장애로 인해 중단, 종료가 됐을 때 예상하고 대처할 수 있어야함.

3. 애플리케이션 구축을 위한 규칙 12 요소 앱 방법론

클라우드 서비스 모델
3.1. IaaS -> 필요한 부분만 사용자에게 재공하여 비용 절감
3.2. PaaS -> IaaS 상위 계층, 애플리케이션을 실행할 때 윈도우 서버 os와 IIS웹서버가 결합된 닷넷 환경 제공
3.3. SaaS -> 최상위 계층, 웹을 통해 필요한 모든 소프트웨어 기능을 완전히 제공
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
클라우드 애플리케이션 아키텍처 패턴

12 요소 앱
1. 요소 II 의존성 - 명시적으로 선언하고 의존성들을 서로 분리시켜라
예를 들어, node.js 애플리케이션에 대해 npm의 package.json 파일사용, 패키지 관리자가 새로운 애플리케이션 인스턴스를 배포할 때 관련된 모든 의존성을 가져올 수 있게 된다.
-> 도커와 같은 컨테이너 엔진이 빛을 발하게 됨

2. 요소III 구성 - 환경에 구성 정보를 저장
구성 정보는 배포가 달라짐에 따라 다양해질 수도 있는 어떤. 종류의 데이터다.
예를 들어 외부 서비스들과 데이터베이스를 위한 연결 데이터와 자격 증명

3. 의존 - 의존 서비스를 추가되는 자원으로 다뤄라
예를 들면 해당 앱이 로컬 개발 배포의 경우에는 eu-central-1.rds.amazonasw.com 값을 DATABASE_URL과 같은 환경 변수에 담아 받을 수 있다.

4. 프로세스 - app을 하나 또는 그 이상의 비상태 기반 프로세스들로 실행하라.
실행 중인 애플리케이션 인스턴스들은 상태를 저장하지 않아야 한다.

5. 폐기성 - 빠른 시작과 정상적인 종료 과정을 갖춰 견고함을 극대화
클라우드 환경에ㅔ서는 갑작스러운 종료를 염두해야함 

6. 로그 - 로그를 이벤트의 연속된 흐름으로 다뤄라.
자신의 로그 데이터에 대한 경로 설정과 저장에 관련돼서는 안됨.
애플리케이션을 개발할 때 콘솔 화면에서 이벤트의 흐름을 불 수 있게 해준다.
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
마이크로서비스란 무엇인가?
애플리케이션이 다수의 다른 개발자에 의해 오랜 시간에 걸쳐 유지 보수가 될 때 점점 더 복잡해지는 경향이 있다.
조직 내에 있는 다른 팀들이 각자의 마이크로서비스를 가질 수 있는 점, 각각의 팀이 독집적으로 해당 서비스를 개발, 배포. 운영할 수 있고 이들이 자신들의 소프트웨어를 아주 유연한 방식으로 보정할 수 있게 된다.

배포
각각의 개별 서비스는 하나의 큰 덩어리로 된 애플리케이션보다 배포하기 쉬워진다.
마이크로서비스를 배포하는 것은 서로 다른 서비스들이 각자 다른 기술들을 사용시 더 복잡하게 된다.
이 문제를 해결하기 위한 가능한 해결책은 도커나 RKT같은 최신 컨테이너 런타임으로 서비스를 제공하는 것.
그외에도 도커 스웜, 쿠버네티스, 아파치 메소드 등
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
REST 웹 서비스와 비동기식 메시징
마이크로서비스 아키텍처를 만들 때 개별 서비스들을 상호 간에 통신이 필요하다.

보통 HTTP에서 구현 -> 요청/응답 통신 방식의 클라이언트/서버 모델을 따른다.

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
이번 프로젝트에 있을 논리를 표현
1. Event Service : 해당 행사와 위치 및 여기서 발생하는 변경을 다루는 서비스
2. Booking Service : 사용자들에 의해 만들어진 예약을 다루는 서비스
